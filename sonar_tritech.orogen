name "sonar_tritech"
version "0.1"

#Checkt Package Config nach include pfaden (hier z.B. Sonar.h
import_types_from "base"
import_types_from "SonarConfigTypes.hpp"
import_types_from "GroundDistanceReading.hpp"

#Er linkt gegen die lib...
using_library "seanet"
#using_library "avalontools"

task_context "Micron" do
	property("config", "sensorConfig::SonarConfig").
            doc "Configuration Values for Sonar"

        
	input_port("config_port", "sensorConfig::SonarConfig").
            doc "Configuration Values for Sonar"
	
	#output_port("debug_config", "sensorConfig::SonarConfig").
        #    doc "Debug Configuration output"
	
        output_port("pts_subdevice", "/std/string")

        output_port("ground_distance", "base::samples::RigidBodyState").
                doc "Current Ground Distance, if availible on AUX port"

	output_port("BaseScan","base::samples::SonarBeam").
		doc "Transmitting Sonar Data"
	
	output_port("CurrentGroundDistance","sensorData::GroundDistanceReading").
		doc "Current Ground Distance"
    
	property('port', '/std/string', "").
            doc 'the device port'
        property('timeout', 'int', 200).
            doc "timeout on the distance readings in milliseconds"
	
	fatal_states :IO_ERROR, :INVALID_CONFIGURATION

	needs_configuration
	fd_driven
end

task_context "Profiling" do
	property("config", "sensorConfig::ProfilingConfig").
            doc "Configuration Values for Sonar"
        
        property('offset','double',0)

#	input_port("config_port", "sensorConfig::ProfilingConfig").
 #           doc "Configuration Values for Sonar"

	output_port("Scan","base::samples::LaserScan").
		doc "Transmitting Sonar Data"
	
	property('port', '/std/string', "").
            doc 'the device port'
        property('timeout', 'int', 200).
            doc "timeout on the distance readings in milliseconds"
        
	fatal_states :IO_ERROR

	needs_configuration
	fd_driven
end

deployment "Profiling_Test_Application" do
	task("profiling","Profiling")
	do_not_install
	add_default_logger
end

deployment "sonar_driver_micron_task_application" do
	bla = task("SonarDriverMicronTask","Micron")
	do_not_install
	
	#triggered #nur wenn nur wenn daten aufrufen
	#
	add_default_logger

	#h√§ngt nen task browser an (Was auch immer tolles)	
	if !corba_enabled?
		browse bla
	end
end

